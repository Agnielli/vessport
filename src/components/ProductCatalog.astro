---
// Catálogo de productos con filtros y búsqueda
import { products, categories } from '../lib/supabase';

// Obtener productos y categorías
const { data: productsData } = await products.getAll({ active: true });
const { data: categoriesData } = await categories.getAll();
---

<section class="py-12 bg-gray-50">
  <div class="container mx-auto px-4">
    <!-- Header con filtros -->
    <div class="mb-8">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h2 class="text-3xl font-display font-bold text-gray-900 mb-2">
            Catálogo de Productos
          </h2>
          <p class="text-gray-600">
            Selecciona la camiseta perfecta para tu diseño personalizado
          </p>
        </div>
        
        <!-- Barra de búsqueda -->
        <div class="flex items-center space-x-4">
          <div class="relative">
            <input 
              type="text" 
              id="search-input"
              placeholder="Buscar productos..." 
              class="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            />
            <svg class="absolute left-3 top-2.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          
          <!-- Filtro por categoría -->
          <select id="category-filter" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent">
            <option value="">Todas las categorías</option>
            {categoriesData?.map(category => (
              <option value={category.id}>{category.name}</option>
            ))}
          </select>
          
          <!-- Filtro por precio -->
          <select id="price-filter" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent">
            <option value="">Todos los precios</option>
            <option value="0-25">€0 - €25</option>
            <option value="25-35">€25 - €35</option>
            <option value="35-50">€35 - €50</option>
            <option value="50+">€50+</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Grid de productos -->
    <div id="products-grid" class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {productsData?.map(product => (
        <div class="product-card bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow" 
             data-category={product.category_id} 
             data-price={product.base_price}
             data-name={product.name.toLowerCase()}>
          
          <!-- Imagen del producto -->
          <div class="aspect-square bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center relative group">
            {product.images && product.images[0] ? (
              <img 
                src={product.images[0]} 
                alt={product.name}
                class="w-full h-full object-cover"
              />
            ) : (
              <div class="w-32 h-32 bg-gradient-to-br from-primary to-primary-dark rounded-lg flex items-center justify-center">
                <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
              </div>
            )}
            
            <!-- Overlay con acciones -->
            <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
              <div class="space-x-2">
                <button class="bg-white text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-100 transition-colors"
                        onclick={`viewProduct('${product.id}')`}>
                  Ver Detalles
                </button>
                <button class="bg-primary text-white px-4 py-2 rounded-lg font-medium hover:bg-primary-dark transition-colors"
                        onclick={`startDesign('${product.id}')`}>
                  Diseñar
                </button>
              </div>
            </div>
          </div>
          
          <!-- Información del producto -->
          <div class="p-6">
            <div class="mb-2">
              <span class="inline-block bg-primary bg-opacity-10 text-primary text-xs font-medium px-2 py-1 rounded-full">
                {categoriesData?.find(cat => cat.id === product.category_id)?.name}
              </span>
            </div>
            
            <h3 class="text-xl font-display font-bold text-gray-900 mb-2">
              {product.name}
            </h3>
            
            <p class="text-gray-600 mb-4 text-sm line-clamp-2">
              {product.description}
            </p>
            
            <div class="flex items-center justify-between mb-4">
              <div class="text-2xl font-bold text-primary">
                €{product.base_price.toFixed(2)}
              </div>
              <div class="text-sm text-gray-500">
                Stock: {product.stock_quantity}
              </div>
            </div>
            
            <!-- Colores disponibles -->
            {product.colors && (
              <div class="mb-4">
                <p class="text-sm font-medium text-gray-700 mb-2">Colores:</p>
                <div class="flex space-x-1">
                  {product.colors.slice(0, 5).map((color: string) => (
                    <div 
                      class={`w-6 h-6 rounded-full border-2 border-gray-300 ${getColorClass(color)}`}
                      title={color}
                    ></div>
                  ))}
                  {product.colors.length > 5 && (
                    <div class="w-6 h-6 rounded-full bg-gray-200 border-2 border-gray-300 flex items-center justify-center">
                      <span class="text-xs text-gray-600">+{product.colors.length - 5}</span>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            <!-- Tallas disponibles -->
            {product.sizes && (
              <div class="mb-4">
                <p class="text-sm font-medium text-gray-700 mb-2">Tallas:</p>
                <div class="flex flex-wrap gap-1">
                  {product.sizes.map((size: string) => (
                    <span class="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded">
                      {size}
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Botones de acción -->
            <div class="space-y-2">
              <button 
                class="w-full bg-primary hover:bg-primary-dark text-white py-2 px-4 rounded-lg font-medium transition-colors"
                onclick={`startDesign('${product.id}')`}
              >
                Crear Diseño
              </button>
              <button 
                class="w-full border border-gray-300 hover:bg-gray-50 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors"
                onclick={`addToCart('${product.id}')`}
              >
                Agregar al Carrito
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Mensaje cuando no hay productos -->
    <div id="no-products" class="hidden text-center py-12">
      <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m13-8l-4 4m0 0l-4-4m4 4V3"></path>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No se encontraron productos</h3>
      <p class="text-gray-600">Intenta ajustar los filtros de búsqueda</p>
    </div>

    <!-- Paginación (para implementar más adelante) -->
    <div class="mt-12 flex justify-center">
      <nav class="flex items-center space-x-2">
        <button class="px-3 py-2 text-gray-500 hover:text-gray-700 disabled:opacity-50" disabled>
          Anterior
        </button>
        <button class="px-3 py-2 bg-primary text-white rounded">1</button>
        <button class="px-3 py-2 text-gray-700 hover:text-gray-900">2</button>
        <button class="px-3 py-2 text-gray-700 hover:text-gray-900">3</button>
        <button class="px-3 py-2 text-gray-500 hover:text-gray-700">
          Siguiente
        </button>
      </nav>
    </div>
  </div>
</section>

<script>
  // Funcionalidad de filtros y búsqueda
  class ProductCatalog {
    private products: NodeListOf<Element>;
    private searchInput: HTMLInputElement;
    private categoryFilter: HTMLSelectElement;
    private priceFilter: HTMLSelectElement;

    constructor() {
      this.products = document.querySelectorAll('.product-card');
      this.searchInput = document.getElementById('search-input') as HTMLInputElement;
      this.categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
      this.priceFilter = document.getElementById('price-filter') as HTMLSelectElement;
      
      this.setupEventListeners();
    }

    private setupEventListeners() {
      this.searchInput.addEventListener('input', this.filterProducts.bind(this));
      this.categoryFilter.addEventListener('change', this.filterProducts.bind(this));
      this.priceFilter.addEventListener('change', this.filterProducts.bind(this));
    }

    private filterProducts() {
      const searchTerm = this.searchInput.value.toLowerCase();
      const selectedCategory = this.categoryFilter.value;
      const selectedPriceRange = this.priceFilter.value;
      
      let visibleCount = 0;

      this.products.forEach(product => {
        const productElement = product as HTMLElement;
        const productName = productElement.dataset.name || '';
        const productCategory = productElement.dataset.category || '';
        const productPrice = parseFloat(productElement.dataset.price || '0');
        
        let isVisible = true;

        // Filtro de búsqueda
        if (searchTerm && !productName.includes(searchTerm)) {
          isVisible = false;
        }

        // Filtro de categoría
        if (selectedCategory && productCategory !== selectedCategory) {
          isVisible = false;
        }

        // Filtro de precio
        if (selectedPriceRange) {
          const [min, max] = this.parsePriceRange(selectedPriceRange);
          if (productPrice < min || (max && productPrice > max)) {
            isVisible = false;
          }
        }

        productElement.style.display = isVisible ? 'block' : 'none';
        if (isVisible) visibleCount++;
      });

      // Mostrar mensaje si no hay productos
      const noProductsMessage = document.getElementById('no-products');
      if (visibleCount === 0) {
        noProductsMessage?.classList.remove('hidden');
      } else {
        noProductsMessage?.classList.add('hidden');
      }
    }

    private parsePriceRange(range: string): [number, number | null] {
      switch (range) {
        case '0-25':
          return [0, 25];
        case '25-35':
          return [25, 35];
        case '35-50':
          return [35, 50];
        case '50+':
          return [50, null];
        default:
          return [0, null];
      }
    }
  }

  // Funciones globales para los botones
  window.viewProduct = (productId: string) => {
    window.location.href = `/products/${productId}`;
  };

  window.startDesign = (productId: string) => {
    window.location.href = `/design/editor?product=${productId}`;
  };

  window.addToCart = (productId: string) => {
    // Implementar lógica del carrito
    console.log('Add to cart:', productId);
  };

  // Inicializar catálogo
  document.addEventListener('DOMContentLoaded', () => {
    new ProductCatalog();
  });
</script>

{/* Función helper para obtener clases de color */}
<script define:vars={{ getColorClass }}>
  function getColorClass(color) {
    const colorMap = {
      'white': 'bg-white',
      'black': 'bg-black',
      'red': 'bg-red-500',
      'blue': 'bg-blue-500',
      'green': 'bg-green-500',
      'yellow': 'bg-yellow-500',
      'purple': 'bg-purple-500',
      'pink': 'bg-pink-500',
      'gray': 'bg-gray-500',
      'navy': 'bg-blue-900',
      'brown': 'bg-yellow-800',
      'olive': 'bg-green-800',
      'natural': 'bg-yellow-100',
      'charcoal': 'bg-gray-800'
    };
    
    return colorMap[color.toLowerCase()] || 'bg-gray-300';
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>