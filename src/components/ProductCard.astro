---
export interface Props {
  id: string;
  name: string;
  price: number;
  image: string;
  description: string;
}

const { id, name, price, image, description } = Astro.props;
---

<div
  class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
>
  <div
    class="aspect-square bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center"
  >
    <div
      class="w-32 h-32 bg-gradient-to-br from-primary to-primary-dark rounded-lg flex items-center justify-center"
    >
      <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 20 20">
        <path
          fill-rule="evenodd"
          d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
          clip-rule="evenodd"></path>
      </svg>
    </div>
  </div>

  <div class="p-6">
    <h3 class="text-xl font-display font-bold text-gray-900 mb-2">{name}</h3>
    <p class="text-gray-600 mb-4">{description}</p>
    <!-- <div class="text-2xl font-bold text-primary mb-4">
      ${price.toLocaleString()}
    </div> -->

    <div class="space-y-4">
      <!-- Size selector -->
      <!-- <div>
        <label class="block text-sm font-medium text-gray-700 mb-2"
          >Talla:</label
        >
        <select
          class="size-selector w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
          data-product-id={id}
        >
          <option value="XS">XS</option>
          <option value="S">S</option>
          <option value="M" selected>M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
          <option value="XXL">XXL</option>
        </select>
      </div> -->

      <!-- Quantity selector -->
      <!-- <div>
        <label class="block text-sm font-medium text-gray-700 mb-2"
          >Cantidad:</label
        >
        <div class="flex items-center space-x-2">
          <button
            class="quantity-btn bg-gray-200 hover:bg-gray-300 w-8 h-8 rounded-lg flex items-center justify-center"
            data-action="decrease"
            data-product-id={id}>-</button
          >
          <input
            type="number"
            class="quantity-input w-16 text-center p-2 border border-gray-300 rounded-lg"
            value="10"
            min="1"
            data-product-id={id}
          />
          <button
            class="quantity-btn bg-gray-200 hover:bg-gray-300 w-8 h-8 rounded-lg flex items-center justify-center"
            data-action="increase"
            data-product-id={id}>+</button
          >
        </div>
      </div> -->

      <!-- Add to cart button -->
      <!-- <button class="add-to-cart w-full bg-primary hover:bg-primary-dark text-white py-3 px-6 rounded-lg font-semibold transition-colors" 
              data-product-id={id} 
              data-product-name={name} 
              data-product-price={price}>
        Agregar al Carrito
      </button> -->
    </div>
  </div>
</div>

<script>
  // This script will be executed for each product card
  document.addEventListener('DOMContentLoaded', function () {
    const productId = '{id}';

    // Quantity controls
    const quantityInput = document.querySelector(
      `input[data-product-id="${productId}"]`
    ) as HTMLInputElement;
    const decreaseBtn = document.querySelector(
      `button[data-action="decrease"][data-product-id="${productId}"]`
    );
    const increaseBtn = document.querySelector(
      `button[data-action="increase"][data-product-id="${productId}"]`
    );

    decreaseBtn?.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = (currentValue - 1).toString();
      }
    });

    increaseBtn?.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = (currentValue + 1).toString();
    });

    // Add to cart functionality
    const addToCartBtn = document.querySelector(
      `button[data-product-id="${productId}"]`
    );
    addToCartBtn?.addEventListener('click', () => {
      const sizeSelector = document.querySelector(
        `select[data-product-id="${productId}"]`
      ) as HTMLSelectElement;
      const quantity = parseInt(quantityInput.value);
      const size = sizeSelector.value;
      const name = addToCartBtn.getAttribute('data-product-name');
      const price = parseFloat(
        addToCartBtn.getAttribute('data-product-price') || '0'
      );

      // Dispatch custom event to be handled by Cart component
      window.dispatchEvent(
        new CustomEvent('addToCart', {
          detail: {
            id: productId,
            name: name,
            price: price,
            size: size,
            quantity: quantity,
          },
        })
      );
    });
  });
</script>
